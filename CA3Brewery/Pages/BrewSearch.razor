@page "/search"
@using CA3Brewery.Brewery
@inject IBreweryService BreweryService
@using System.Collections.Generic
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager Navigation

@inject HttpClient Http

<PageTitle>Brewery</PageTitle>
<h1>Search Brewery</h1>

<div class="form-group">
    <label for="searchInput">Search for a brewery:</label>
    <input type="text" class="form-control" id="searchInput" @bind="searchQuery" />
    <button class="btn btn-secondary mt-3" @onclick="OnInitializedAsync">Reset</button>
    <button class="btn btn-secondary mt-3" @onclick="SearchBreweries">Search</button>
</div>
<div>
    <div class="card-columns">
        <div class="row d-flex">
            @foreach (var brewery in breweries)
            {
                <div class="col-sm-4 mt-3">
                    <div class="card" @onclick="@(() => NavigateToBreweryDetails(brewery.Id))">
                        <div class="card-body">
                            <h6 class="card-title">@brewery.Name</h6>
                            <p class="card-text">Brewery Type: @brewery.Brewery_type</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@if (breweries.Count == 0)
{
    <p>No results found for search query for '@searchQuery'.</p>
}

@if (Error != null)
{
    <p>Error: @Error</p>
}

@code {
    private List<BreweryItem> breweries = new List<BreweryItem>();
    private string searchQuery = "";
    public string? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //
        Http = new HttpClient();

        try
        {
            var breweryService = new BreweryService(Http);
            breweries = await BreweryService.GetBrewery(10);
        }
        catch (Exception e)
        {
            Error = e.Message;
            Console.WriteLine(Error);
        }
    }

    // Method to search for breweries
    private async Task SearchBreweries()
    {
        try
        {
            breweries = await BreweryService.SearchBreweries(searchQuery);
        }
        catch (Exception e)
        {
            Error = e.Message;
            Console.WriteLine(Error);
        }
    }

    //navigation
    private void NavigateToBreweryDetails(string id)
    {
        Navigation.NavigateTo($"/brewery/{id}");
    }

}